#!/usr/bin/lua
local string_gmatch = string.gmatch

require "zmq"

local zmqcontext = zmq.init(1)
local zmqsocket = zmqcontext:socket(zmq.REQ)

-----------------------------------------------------------------------------
--                                   MISC                                  --
-----------------------------------------------------------------------------

local function Error(...)
	io.stderr:write("Error: ")
	io.stderr:write(...)
	io.stderr:write("\n")
	os.exit()
end

local function Argify(s)
	local t = {}
	for w in string_gmatch(s, "([^%s]+)") do
		t[#t+1] = w
	end
	return t
end

-----------------------------------------------------------------------------
--                                 DATABASE                                --
-----------------------------------------------------------------------------

local database = {}
local playeroid

local function objref(oid)
	oid = tonumber(oid)
	local o = database[oid]
	if not o then
		o = {_oid = oid}
		database[oid] = o
	end
	return o
end
	
local type_handlers =
{
	Number = function(reader)
		return tonumber(reader())
	end,
	
	Object = function(reader)
		return objref(reader())
	end,
	
	Token = function(reader)
		return reader()
	end,
	
	String = function(reader)
		return reader()
	end,
	
	ObjectSet = function(reader)
		local count = tonumber(reader())
		local data = {}
		
		for i = 1, count do
			local o = objref(reader())
			data[o] = true
		end
		
		return data
	end,
	
	ObjectMap = function(reader)
		local count = tonumber(reader())
		local data = {}
		
		for i = 1, count do
			local key = reader()
			local value = objref(reader())
			data[key] = value
		end
		
		return data
	end
}

local function update_database(reader)
	local count = 0
	while true do
		local oid = tonumber(reader())
		if not oid then
			break
		end
		
		local o = objref(oid)
		
		local kid = reader()
		local type = reader()
		local handler = type_handlers[type]
		if not handler then
			error("unknown type in wire protocol '"..type.."'")
		end
		
		o[kid] = handler(reader)
		
		count = count + 1
	end
	if (count > 0) then
		print("[received delta of size "..count.."]")
	end
end

-----------------------------------------------------------------------------
--                              ZMQ TRANSPORT                              --
-----------------------------------------------------------------------------

local tag = 1
local function RawCommand(...)
	local t = {tag, ...}
	io.stdout:write("[out: ", #t)
	io.stdout:flush()
	for i = 1, (#t-1) do
		zmqsocket:send(t[i], zmq.SNDMORE)
	end
	zmqsocket:send(t[#t], zmq.NOMORE)
	
	t = {}
	while true do
		t[#t+1] = zmqsocket:recv()
		if (zmqsocket:getopt(zmq.RCVMORE) == 0) then
			break
		end
	end
	
	io.stdout:write(" in: ", #t, "]\n")
	io.stdout:flush()
	
	assert(tonumber(t[1]) == tag)
	tag = tag + 1
	table.remove(t, 1)
	
	return t
end

local canonicaltime = 0
local authstring
local function GameCommand(...)
	t = RawCommand("GameOperation", authstring, canonicaltime, ...)
	
	canonicaltime = tonumber(t[2])
	local result = t[1]
	
	local i = 3
	local function reader()
		local value = t[i]
		i = i + 1
		return value;
	end
	
	update_database(reader)
	
	return t[1]
end

-----------------------------------------------------------------------------
--                                COMMANDS                                 --
-----------------------------------------------------------------------------

local function command_x(oid)
	oid = tonumber(oid)
	print("Object #"..oid)
	
	local o = database[oid]
	if not o then
		print("  No data on object!")
		return
	end
	
	if o.Name then
		print("  "..o.Class..": "..o.Name)
	else
		print("  "..o.Class)
	end
	
	local keys = {}
	for k, _ in pairs(o) do
		if (k ~= "_oid") then
			keys[#keys+1] = k
		end
	end
	
	for _, k in ipairs(keys) do
		local v = o[k]
		local s = v
		
		if (type(v) == "table") then
			local t = v._oid
			if t then
				s = "#"..t
			else
				local ss = {}
				for kk, vv in pairs(v) do
					if (vv == true) then
						ss[#ss+1] = '#'..kk._oid
					else
						ss[#ss+1] = '"'..kk..'"=#'..vv._oid
					end
					if (#ss == 10) then
						ss[#ss+1] = "..."
						break
					end
				end
				s = "["..table.concat(ss, " ").."]"
			end
		end
		
		print("    "..k..": "..s)
	end
end

local function command_ls()
	local player = database[playeroid]
	print("Player #"..playeroid..": "..player.PlayerName.." of "..player.EmpireName)
	
	for name, fleet in pairs(player.Fleets) do
		if (name ~= "_oid") then
			print("  Fleet #"..(fleet._oid)..": "..name)
			
			local location = fleet.Location
			print("    Location: #"..location._oid.." ("..location.Name..")")
			
			for unit in pairs(fleet.Contents) do
				if (unit ~= "_oid") then
					print("      "..unit.Class.." #"..unit._oid)
				end
			end
		end
	end
end

-----------------------------------------------------------------------------
--                              COMMAND LINE                               --
-----------------------------------------------------------------------------

local server = arg[1]
local username = arg[2]
local password = arg[3]
local r

if not password then
	Error("you must specify a server name, username and password")
end

print("Connecting...")
zmqsocket:connect(server)

-- Attempt to authenticate the player.

print("Authenticating...")
r = RawCommand("Authenticate", username, password)
if (r[1] ~= "OK") then
	print("Failed. Attempting to create test player...")
	
	r = RawCommand("CreatePlayer",
		"PlayerName", username,
		"Password", password,
		"Email", "test@invalid.com",
		"EmpireName", "The Testing Empire")
	if (r[1] ~= "OK") then
		print("Unable to create test player: "..r[1])
		os.exit()
	end
	
	print("Re-authenticating...")
	r = RawCommand("Authenticate", username, password)
	if (r[1] ~= "OK") then
		print("Unable to authenticate new player, giving up.")
		os.exit()
	end
end

authstring = r[2]
playeroid = tonumber(r[3])
print("Success. Doing initial database sync...")

GameCommand("Ping")

print()
command_ls()

while true do
	io.stdout:write("> ")
	io.stdout:flush()
	local command = io.stdin:read("*l")
	command = Argify(command)
	
	if (command[1] == "x") then
		command_x(unpack(command, 2))
	elseif (command[1] == "ls") then
		command_ls(unpack(command, 2))
	else
		r = GameCommand(unpack(command))
		print("Result from server: "..r)
	end
end
